from __future__ import annotations

import io

import pytest
import torch

import neps.optimizers.bayesian_optimization.kernels as _bo_kernels
import neps.optimizers.bayesian_optimization.kernels.string_hierarchy.config_string as _config_string


KERNEL_NAME = "nask"
TOLERANCE = 1E-6

CONFIG_STRINGS = (
    "(D1 Residual3 (C Linear2 (CELL Cell) (CELL Cell)) (C Residual2 (CELL Cell) (CELL Cell) (CELL Cell)) (DOWN Residual2 (CELL Cell) resBlock resBlock) (DOWN Residual2 (CELL Cell) resBlock resBlock))",
    "(CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV dconv3x3o) (NORM instance))) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM instance))) (OPS avg_pool) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv3x3o) (NORM batch))))",
    "(C Linear3 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV dconv3x3o) (NORM instance))) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM instance))) (OPS avg_pool) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv3x3o) (NORM batch)))) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv3x3o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM instance))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV dconv3x3o) (NORM layer)))) (CELL Cell (OPS avg_pool) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS avg_pool) (OPS id) (OPS id)))",
    "(C Residual2 (CELL Cell (OPS avg_pool) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM layer))) (OPS id) (OPS zero) (OPS zero)) (CELL Cell (OPS zero) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS id)) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS id) (OPS zero) (OPS zero) (OPS avg_pool) (OPS id)))",
    "(D1 Residual3 (C Linear2 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv3x3o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch)))) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM layer))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM instance))) (OPS zero) (OPS avg_pool))) (C Residual2 (CELL Cell (OPS avg_pool) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM layer))) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM batch)))) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM batch))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM layer))) (OPS id)) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM batch))) (OPS zero) (OPS avg_pool) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv3x3o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM layer))))) (DOWN Residual2 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV dconv3x3o) (NORM batch))) (OPS id) (OPS id) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv3x3o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV dconv3x3o) (NORM instance)))) resBlock resBlock) (DOWN Residual2 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM instance))) (OPS zero) (OPS zero) (OPS zero) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV dconv3x3o) (NORM batch)))) resBlock resBlock))",
    "(D2 Linear4 (D1 Linear3 (C Linear3 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV dconv3x3o) (NORM instance))) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM instance))) (OPS avg_pool) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv3x3o) (NORM batch)))) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv3x3o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM instance))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV dconv3x3o) (NORM layer)))) (CELL Cell (OPS avg_pool) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS avg_pool) (OPS id) (OPS id))) (C Residual2 (CELL Cell (OPS avg_pool) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM layer))) (OPS id) (OPS zero) (OPS zero)) (CELL Cell (OPS zero) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS id)) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS id) (OPS zero) (OPS zero) (OPS avg_pool) (OPS id))) (DOWN Residual2 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV dconv3x3o) (NORM instance))) (OPS id) (OPS id) (OPS avg_pool) (OPS avg_pool) (OPS id)) resBlock resBlock)) (D1 Residual3 (C Linear2 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv3x3o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch)))) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM layer))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM instance))) (OPS zero) (OPS avg_pool))) (C Residual2 (CELL Cell (OPS avg_pool) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM layer))) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM batch)))) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM batch))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM batch))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM layer))) (OPS id)) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM batch))) (OPS zero) (OPS avg_pool) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv3x3o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM layer))))) (DOWN Residual2 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV dconv3x3o) (NORM batch))) (OPS id) (OPS id) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv3x3o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV dconv3x3o) (NORM instance)))) resBlock resBlock) (DOWN Residual2 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM instance))) (OPS zero) (OPS zero) (OPS zero) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV dconv3x3o) (NORM batch)))) resBlock resBlock)) (D0 Residual3 (C Linear3 (CELL Cell (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM layer))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV dconv3x3o) (NORM layer))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM instance)))) (CELL Cell (OPS avg_pool) (OPS avg_pool) (OPS zero) (OPS id) (OPS zero) (OPS id)) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV dconv3x3o) (NORM layer))) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV dconv3x3o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV dconv3x3o) (NORM layer))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV dconv3x3o) (NORM layer))) (OPS avg_pool))) (C Residual2 (CELL Cell (OPS id) (OPS avg_pool) (OPS zero) (OPS avg_pool) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV dconv3x3o) (NORM layer)))) (CELL Cell (OPS avg_pool) (OPS avg_pool) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM layer)))) (CELL Cell (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV dconv3x3o) (NORM batch))) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv3x3o) (NORM layer))) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv3x3o) (NORM instance))))) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV dconv3x3o) (NORM instance))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv3x3o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM instance))) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM layer)))) (CELL Cell (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM layer))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV dconv3x3o) (NORM instance))) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS avg_pool))) (D0 Residual3 (C Residual2 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV dconv3x3o) (NORM layer))) (OPS zero) (OPS zero) (OPS zero) (OPS id) (OPS id)) (CELL Cell (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV dconv3x3o) (NORM layer))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv3x3o) (NORM batch))) (OPS id) (OPS zero)) (CELL Cell (OPS id) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv3x3o) (NORM instance))) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS zero))) (C Residual2 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV dconv3x3o) (NORM layer))) (OPS zero) (OPS zero) (OPS zero) (OPS id) (OPS id)) (CELL Cell (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM instance))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV dconv3x3o) (NORM layer))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv3x3o) (NORM batch))) (OPS id) (OPS zero)) (CELL Cell (OPS id) (OPS zero) (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv3x3o) (NORM instance))) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS zero))) (CELL Cell (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv1x1o) (NORM layer))) (OPS id) (OPS zero) (OPS id)) (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV conv1x1o) (NORM layer))) (OPS zero) (OPS avg_pool) (OPS Linear1 (CONVBLOCK Linear3 (ACT relu) (CONV conv3x3o) (NORM batch))) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV dconv3x3o) (NORM layer))) (OPS avg_pool))))",
    "(DOWN Residual2 (CELL Cell (OPS Linear1 (CONVBLOCK Linear3 (ACT mish) (CONV conv1x1o) (NORM instance))) (OPS zero) (OPS zero) (OPS zero) (OPS id) (OPS Linear1 (CONVBLOCK Linear3 (ACT hardswish) (CONV dconv3x3o) (NORM batch)))) resBlock resBlock)",
)

EXPECTED_VALUES = {
    1: b"PK\x03\x04\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x12\x00archive/data.pklFB\x0e\x00ZZZZZZZZZZZZZZ\x80\x02ctorch._utils\n_rebuild_tensor_v2\nq\x00((X\x07\x00\x00\x00storageq\x01ctorch\nFloatStorage\nq\x02X\x01\x00\x00\x000q\x03X\x03\x00\x00\x00cpuq\x04K1tq\x05QK\x00K\x07K\x07\x86q\x06K\x07K\x01\x86q\x07\x89ccollections\nOrderedDict\nq\x08)Rq\ttq\nRq\x0b.PK\x07\x08hl\x8c\x98\x9a\x00\x00\x00\x9a\x00\x00\x00PK\x03\x04\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00*\x00archive/data/0FB&\x00ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00O\xe0\x9e;\x00\x00\x80?zt\x9f;\x95< <\x00\x00\x00\x00\x00\x00\x80?\xf6\x97l<\xf6\x97l<\x00\x00\x00\x00\x00\x00\x00\x00f\x14\x9f;\x00\x00\x00\x00\xf6\x97l<\x01\x00\x80?\xd9\xdf\xc5<\x00\x00\x00\x00\x00\x00\x00\x00\x87{\xef;O\xe0\x9e;\xf6\x97l<\xd9\xdf\xc5<\x01\x00\x80?O\xe0\x9e;\x00\x00\x00\x00\x87{\xef;\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00O\xe0\x9e;\x00\x00\x80?zt\x9f;\x95< <zt\x9f;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00zt\x9f;\x00\x00\x80?\x00\x00\x00\x00\x95< <f\x14\x9f;\x87{\xef;\x87{\xef;\x95< <\x00\x00\x00\x00\x00\x00\x80?PK\x07\x08\x94\x12\x7f\xa3\xc4\x00\x00\x00\xc4\x00\x00\x00PK\x03\x04\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00?\x00archive/versionFB;\x00ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ3\nPK\x07\x08\xd1\x9egU\x02\x00\x00\x00\x02\x00\x00\x00PK\x01\x02\x00\x00\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00hl\x8c\x98\x9a\x00\x00\x00\x9a\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00archive/data.pklPK\x01\x02\x00\x00\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x94\x12\x7f\xa3\xc4\x00\x00\x00\xc4\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00archive/data/0PK\x01\x02\x00\x00\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\xd1\x9egU\x02\x00\x00\x00\x02\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x02\x00\x00archive/versionPK\x06\x06,\x00\x00\x00\x00\x00\x00\x00\x1e\x03-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xb7\x00\x00\x00\x00\x00\x00\x00\x92\x02\x00\x00\x00\x00\x00\x00PK\x06\x07\x00\x00\x00\x00I\x03\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00PK\x05\x06\x00\x00\x00\x00\x03\x00\x03\x00\xb7\x00\x00\x00\x92\x02\x00\x00\x00\x00",
    2: b"PK\x03\x04\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x12\x00archive/data.pklFB\x0e\x00ZZZZZZZZZZZZZZ\x80\x02ctorch._utils\n_rebuild_tensor_v2\nq\x00((X\x07\x00\x00\x00storageq\x01ctorch\nFloatStorage\nq\x02X\x01\x00\x00\x000q\x03X\x03\x00\x00\x00cpuq\x04K1tq\x05QK\x00K\x07K\x07\x86q\x06K\x07K\x01\x86q\x07\x88ccollections\nOrderedDict\nq\x08)Rq\ttq\nRq\x0b.PK\x07\x08\xc1g\x05\xd6\x9a\x00\x00\x00\x9a\x00\x00\x00PK\x03\x04\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00*\x00archive/data/0FB&\x00ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\xa3\x11\xc5=\x00\x00\x80?9\x8e\xe3=\x1e\xa6\x98>\x00\x00\x00\x00\xff\xff\x7f?.\xf9d>.\xf9d>\x00\x00\x00\x00\x00\x00\x00\x00\x8f{\xec=\x00\x00\x00\x00.\xf9d>\x00\x00\x80?UUU?\x00\x00\x00\x00\x00\x00\x00\x00\xf8K\xc6>\xa3\x11\xc5=.\xf9d>UUU?\x00\x00\x80?\xa3\x11\xc5=\x00\x00\x00\x00\xf8K\xc6>\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\xa3\x11\xc5=\x00\x00\x80?9\x8e\xe3=\x1e\xa6\x98>9\x8e\xe3=\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x009\x8e\xe3=\x00\x00\x80?\x00\x00\x00\x00\x1e\xa6\x98>\x8f{\xec=\xf8K\xc6>\xf8K\xc6>\x1e\xa6\x98>\x00\x00\x00\x00\x00\x00\x80?PK\x07\x08^]\xde\x1f\xc4\x00\x00\x00\xc4\x00\x00\x00PK\x03\x04\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00?\x00archive/versionFB;\x00ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ3\nPK\x07\x08\xd1\x9egU\x02\x00\x00\x00\x02\x00\x00\x00PK\x01\x02\x00\x00\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\xc1g\x05\xd6\x9a\x00\x00\x00\x9a\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00archive/data.pklPK\x01\x02\x00\x00\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00^]\xde\x1f\xc4\x00\x00\x00\xc4\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00archive/data/0PK\x01\x02\x00\x00\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\xd1\x9egU\x02\x00\x00\x00\x02\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x02\x00\x00archive/versionPK\x06\x06,\x00\x00\x00\x00\x00\x00\x00\x1e\x03-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xb7\x00\x00\x00\x00\x00\x00\x00\x92\x02\x00\x00\x00\x00\x00\x00PK\x06\x07\x00\x00\x00\x00I\x03\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00PK\x05\x06\x00\x00\x00\x00\x03\x00\x03\x00\xb7\x00\x00\x00\x92\x02\x00\x00\x00\x00",
    3: b"PK\x03\x04\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x12\x00archive/data.pklFB\x0e\x00ZZZZZZZZZZZZZZ\x80\x02ctorch._utils\n_rebuild_tensor_v2\nq\x00((X\x07\x00\x00\x00storageq\x01ctorch\nFloatStorage\nq\x02X\x01\x00\x00\x000q\x03X\x03\x00\x00\x00cpuq\x04K1tq\x05QK\x00K\x07K\x07\x86q\x06K\x07K\x01\x86q\x07\x88ccollections\nOrderedDict\nq\x08)Rq\ttq\nRq\x0b.PK\x07\x08\xc1g\x05\xd6\x9a\x00\x00\x00\x9a\x00\x00\x00PK\x03\x04\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00*\x00archive/data/0FB&\x00ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ\x00\x00\x80?F\x93\x00>\xd02d>\xb4tw>\x00\x00\x80?X\xcb\x0f?d\xde\x8e>F\x93\x00>\x01\x00\x80?\xf3k\x05?!k\xe7>F\x93\x00>X\xf8\x94=\xaa\xa3\xbd>\xd02d>\xf3k\x05?\xff\xff\x7f?\xa5\xb2;?\xd02d>\x16;\x1a><\xca\x0e?\xb4tw>!k\xe7>\xa5\xb2;?\x01\x00\x80?\xb4tw>\x7f\xdaA>\x86\x96H?\x00\x00\x80?F\x93\x00>\xd02d>\xb4tw>\x00\x00\x80?X\xcb\x0f?d\xde\x8e>X\xcb\x0f?X\xf8\x94=\x16;\x1a>\x7f\xdaA>X\xcb\x0f?\x01\x00\x80?PW8>d\xde\x8e>\xaa\xa3\xbd><\xca\x0e?\x86\x96H?d\xde\x8e>PW8>\x00\x00\x80?PK\x07\x08\x06\xde\x92\x14\xc4\x00\x00\x00\xc4\x00\x00\x00PK\x03\x04\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00?\x00archive/versionFB;\x00ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ3\nPK\x07\x08\xd1\x9egU\x02\x00\x00\x00\x02\x00\x00\x00PK\x01\x02\x00\x00\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\xc1g\x05\xd6\x9a\x00\x00\x00\x9a\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00archive/data.pklPK\x01\x02\x00\x00\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\x06\xde\x92\x14\xc4\x00\x00\x00\xc4\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00archive/data/0PK\x01\x02\x00\x00\x00\x00\x08\x08\x00\x00\x00\x00\x00\x00\xd1\x9egU\x02\x00\x00\x00\x02\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x02\x00\x00archive/versionPK\x06\x06,\x00\x00\x00\x00\x00\x00\x00\x1e\x03-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xb7\x00\x00\x00\x00\x00\x00\x00\x92\x02\x00\x00\x00\x00\x00\x00PK\x06\x07\x00\x00\x00\x00I\x03\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00PK\x05\x06\x00\x00\x00\x00\x03\x00\x03\x00\xb7\x00\x00\x00\x92\x02\x00\x00\x00\x00",
}


def torch_export_to_byte_string(tensor: torch.Tensor) -> bytes:
    """Can be used to generate the byte strings for the expected values"""
    tensor_bytes = io.BytesIO()
    torch.save(tensor, tensor_bytes)
    tensor_bytes.seek(0)
    return tensor_bytes.getvalue()


@pytest.mark.parametrize(
    "hierarchy_level",
    list(EXPECTED_VALUES.keys()),
)
def test_forward_values(
    hierarchy_level,
    config_strings=CONFIG_STRINGS,
):
    n_configs = len(config_strings)
    configs = tuple(
        _config_string.ConfigString(config_string=c) for c in config_strings
    )

    kernel_type = _bo_kernels.StringKernelMapping[KERNEL_NAME]
    kernel = kernel_type(hierarchy_level=hierarchy_level)
    K = kernel.forward(configs=configs)

    assert n_configs > 0
    assert K.size() == (n_configs, n_configs)

    expected_value_bytes = io.BytesIO(EXPECTED_VALUES[hierarchy_level])
    expected_value = torch.load(expected_value_bytes)
    assert ((K - expected_value) <= TOLERANCE).all()
